{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","components/AddTransiction.js","components/Balance.js","components/Header.js","components/IncomeExpense.js","components/Transaction.js","components/TransactionList.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","AddTransiction","useState","text","setText","amount","setAmount","useContext","onSubmit","e","preventDefault","newTransaction","Math","floor","random","className","htmlFor","onChange","target","placeholder","Balance","total","map","reduce","acc","item","toFixed","Header","IncomeExpense","amounts","income","expense","Transaction","sign","abs","onClick","TransactionList","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.783d50fc.chunk.js","sourcesContent":["export default (state,action) => {\n    switch(action.type) {\n        case 'DELETE_TRANSACTION':\n            return{\n                ...state,\n                transactions: state.transactions.filter(transaction =>\n                    transaction.id !== action.payload)\n            }\n        case 'ADD_TRANSACTION':\n            return{\n                ...state,\n                transactions: [action.payload, ...state.transactions]\n            }\n\n        default:\n            return state;\n    }\n}","import React, {createContext,useReducer} from 'react'\nimport AppReducer from './AppReducer';\n\n//initial state\nconst initialState ={\n    transactions: []\n}\n\n//create context\nexport const GlobalContext =    createContext(initialState);\n\n//provider context\nexport const GlobalProvider = ({children}) => {\n    const [state,dispatch] = useReducer(AppReducer, initialState)\n\n    function deleteTransaction(id) {\n        dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload:id\n        })\n    }\n\n    function addTransaction(transaction) {\n        dispatch({\n            type: 'ADD_TRANSACTION',\n            payload:transaction\n        })\n    }\n\n    return (\n        <GlobalContext.Provider value={{transactions:state.transactions,\n        deleteTransaction,addTransaction}}>\n            {children}\n        </GlobalContext.Provider>\n    )\n}","import React, {useState, useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const AddTransiction = () => {\n    const [text,setText] = useState('')\n    const [amount,setAmount] = useState(0)\n\n    const {addTransaction} = useContext(GlobalContext)\n\n    const onSubmit = e => {\n        e.preventDefault()\n\n        const newTransaction = {\n            id: Math.floor(Math.random()* 100000000),\n            text,\n            amount: +amount\n        }\n\n        addTransaction(newTransaction)\n    }\n\n    return (\n        <>\n             <h3>Add new transaction</h3>\n            <form onSubmit={onSubmit}>\n\n                <div className=\"form-control\">\n                <label htmlFor=\"text\">Text</label>\n                <input type=\"text\" value={text} onChange={e => setText(e.target.value)} \n                placeholder=\"Enter text...\" />\n                </div>\n\n                <div className=\"form-control\">\n                <label htmlFor=\"amount\"\n                    >Amount <br />\n                    (negative - expense, positive - income)</label\n                >\n                <input type=\"number\" value={amount} onChange={e => setAmount(e.target.value)}\n                 placeholder=\"Enter amount...\" />\n                </div>\n\n                <button className=\"btn\">Add transaction</button>\n            </form>\n        </>\n    )\n}\n","import React, {useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const Balance = () => {\n    const { transactions } = useContext(GlobalContext)\n\n    const amounts = transactions.map(transaction => transaction.amount);\n\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n\n    return (\n        <>\n            <h4>Your Balance</h4>\n            <h1>${total}</h1>\n        </>\n    )\n}\n","import React from 'react'\n\nexport const Header = () => {\n    return (\n        <div>\n            Hello Expense Tracking\n        </div>\n    )\n}\n","import React, {useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const IncomeExpense = () => {\n    const { transactions } = useContext(GlobalContext)\n\n    const amounts = transactions.map(transaction => transaction.amount);\n  \n    const income = amounts\n      .filter(item => item > 0)\n      .reduce((acc, item) => (acc += item), 0)\n      .toFixed(2);\n  \n    const expense = (\n      amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\n      -1\n    ).toFixed(2);\n\n    return (\n        <div>\n            <div className=\"inc-exp-container\">\n                <div>\n                    <h4>Income</h4>\n                    <p className=\"money plus\">{income}</p>\n                </div>\n                <div>\n                    <h4>Expense</h4>\n                    <p className=\"money minus\">{expense}</p>\n                 </div>\n            </div>\n        </div>\n    )\n}\n","import React, {useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const Transaction = ({transaction}) => {\n    const {deleteTransaction} = useContext(GlobalContext)\n\n    const sign = transaction.amount < 0 ? '-' : '+'\n\n    return (\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\n        {transaction.text} <span>{sign}${Math.abs(transaction.amount)}</span>\n        <button onClick={() => deleteTransaction(transaction.id)} \n        className=\"delete-btn\">x</button>\n        </li>\n    )\n}\n","import React, {useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState'\nimport { Transaction } from './Transaction'\n\nexport const TransactionList = () => {\n    const { transactions } = useContext(GlobalContext)\n\n    return (\n            <div>\n                <h3>History</h3>\n                <ul className=\"list\">\n                    {transactions.map(transaction=>(<Transaction\n                    key={transaction.id} transaction={transaction} />))\n                    }\n                 </ul>\n            </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport { AddTransiction } from './components/AddTransiction';\nimport { Balance } from './components/Balance';\nimport { Header } from './components/Header';\nimport { IncomeExpense } from './components/IncomeExpense';\nimport { TransactionList } from './components/TransactionList';\nimport { GlobalProvider } from './context/GlobalState';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpense />\n        <TransactionList />\n        <AddTransiction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}